var Reveald3 = window.Reveald3 || function () { const e = Reveal.getConfig() || {}; e.reveald3 = e.reveald3 || {}; const t = { runLastState: null == e.reveald3.runLastState ? !e.reveald3.runLastState : e.reveald3.runLastState, onSlideChangedDelay: null == e.reveald3.onSlideChangedDelay ? 0 : e.reveald3.onSlideChangedDelay, mapPath: "string" == typeof e.reveald3.mapPath ? e.reveald3.mapPath : e.reveald3.mapPath ? "src" : "", tryFallbackURL: null == e.reveald3.tryFallbackURL ? !!e.reveald3.tryFallbackURL : e.reveald3.tryFallbackURL, disableCheckFile: null == e.reveald3.disableCheckFile ? !!e.reveald3.disableCheckFile : e.reveald3.disableCheckFile }; let n; window.document.addEventListener("iframe-keydown", e => Reveal.triggerKey(e.detail.keyCode), !1); const a = Array.from(document.querySelectorAll(".slides>section")).length; function i() { if (n) for (const e of Object.values(n)) { Reveal.getSlideBackground(e.slide).querySelector(".slide-background-content").innerHTML = "" } } function r(t, i) { if (!n) return; const r = i ? 10 : e.viewDistance; for (const i of Object.values(n)) { let n = Math.abs((t.indexh || 0) - i.index.h) || 0; if (e.loop && (n = Math.abs(((t.indexh || 0) - i.index.h) % (a - r)) || 0), n < r && i.preload || 0 == n) { const e = o(i); s({ isBackground: i.isBackground, onCurrentSlide: !0, index: i.index, slide: i.slide, container: i.container, file: i.file, preload: i.preload, fragmentsInSlide: i.fragmentsInSlide, iframeStyle: e.iframeStyle, iframeExtra: e.iframeExtra }) } else { const e = i.slide.slideBackgroundContentElement.querySelector(".iframe-visualization"); e && e.parentNode.removeChild(e) } } } function l(e) { let t = Array.prototype.slice.call(e.querySelectorAll(".fragment")); t = t.filter(e => !e.getAttribute("class").split().includes("visualizationStep")); let n = []; for (let e = 0; e < t.length; e++)n.push(parseInt(t[e].getAttribute("data-fragment-index"))); return n = [...new Set(n)] } Reveal.addEventListener("ready", function (e) { const { slides: t, backgrounds: a } = Array.from(document.getElementsByClassName("fig-container")).reduce((e, t) => { const n = "SECTION" == t.tagName, a = !!n && !t.hasAttribute("data-no-background"), i = n ? t : t.closest("section"); if (i) { const { h: r, v: o, f: s } = Reveal.getIndices(i), d = `h-${r || null}/v-${o || null}/f-${s || null}`; a ? e.backgrounds[d] = { slide: i, index: { h: r, v: o }, container: t, isBackground: n, file: t.getAttribute("data-file"), preload: t.hasAttribute("data-preload"), fragmentsInSlide: l(i) } : e.slides[d] = e.slides[d] ? Object.assign(e.slides[d], { containers: [...e.slides[d].containers, { isBackground: n, container: t, file: t.getAttribute("data-file"), preload: t.hasAttribute("data-preload") }] }) : { index: { h: r, v: o }, slide: i, containers: [{ isBackground: a, container: t, file: t.getAttribute("data-file"), preload: t.hasAttribute("data-preload") }], fragmentsInSlide: l(i) } } return e }, { backgrounds: {}, slides: {} }); n = a, function (e) { const t = Reveal.getCurrentSlide(); for (const n of Object.values(e)) for (const e of n.containers) { const a = o(e); s({ isBackground: e.isBackground, onCurrentSlide: n.slide == t, index: n.index, slide: n.slide, container: e.container, file: e.file, preload: e.preload, fragmentsInSlide: n.fragmentsInSlide, iframeStyle: a.iframeStyle, iframeExtra: a.iframeExtra }) } }(t), r(e) }), Reveal.addEventListener("slidechanged", function (e) { const n = Reveal.getState().overview; n && i(); const { currentSlide: a, previousSlide: l } = e, o = u({ currentSlide: a, previousSlide: l }); if (r(e, n), t.runLastState && o) { let e = d(a); for (const t of e) c(t) } if (!o) { let e = d(a); setTimeout(() => { !function (e) { for (const t of e) t.transitionOnSlideChange && (t.transitionOnSlideChange.transitionForward || Function)() }(e) }, t.onSlideChangedDelay) } }), Reveal.addEventListener("overviewshown", function (e) { r(e, !0) }), Reveal.addEventListener("overviewhidden", function (e) { i(), r(e, !1) }); const o = e => { const t = e.container.getAttribute("data-style") ? e.container.getAttribute("data-style") : "", n = /\s*([^;^\s]*)\s*:\s*([^;^\s]*(\s*)?(!important)?)/g; let a, i = {}; for (; a = n.exec(t);)i[a[1]] = a[2]; return { iframeStyle: Object.assign({ margin: "0px", width: "100vw", height: "100vh", "max-width": "100%", "max-height": "100%", "z-index": 1, border: 0 }, i), iframeExtra: { scrolling: e.container.getAttribute("data-scroll") ? e.container.getAttribute("data-scroll") : "yes" } } }; async function s(e) { const { isBackground: n, onCurrentSlide: a, index: i, slide: r, container: l, file: o, fragmentsInSlide: s, preload: f, iframeStyle: g, iframeExtra: h } = e; l.style.overflow = "" != l.style.overflow || JSON.parse(l.getAttribute("data-overflow-shown")) ? l.style.overflow : "hidden"; const v = !!t.disableCheckFile || await (m = t.mapPath + o, fetch(m, { method: "head", mode: "no-cors" }).then(e => !(!e.ok || 200 != e.status) || (console.log(`Couldn't locate "${m}", fallback to original url at "${m.slice(t.mapPath.length)}" if mapPath was set.`), !1)).catch(function (e) { console.log("Error ", e) })); var m; const p = t.tryFallbackURL && v ? t.mapPath + o : o; if (l.querySelectorAll("iframe").length > 0) return; let S = { class: "iframe-visualization", sandbox: "allow-popups allow-scripts allow-forms allow-same-origin", style: Object.entries(g).reduce((e, [t, n]) => `${e}${t}:${String(n).replace(/\s+/, " ")};`, ""), ...h }; const y = a ? { src: p, "data-lazy-loaded": "" } : { "data-src": p }, b = f ? { "data-preload": !0 } : {}, w = n ? { allowfullscreen: "", mozallowfullscreen: "", webkitallowfullscreen: "", width: "100%", height: "100%" } : {}; S = Object.assign(S, { ...y, ...b, ...w }); const k = document.createElement("iframe"); for (const [e, t] of Object.entries(S)) k.setAttribute(e, t); if (n) { const e = Reveal.getSlideBackground(r); if (e.querySelector("iframe")) return; e.querySelector(".slide-background-content").appendChild(k) } else l.appendChild(k); k.addEventListener("load", function () { (k.contentWindow || k.contentDocument).addEventListener("keydown", function (e) { const t = new CustomEvent("iframe-keydown", { detail: e }); window.parent.document.dispatchEvent(t) }); let e = d(r), n = [], a = null; for (const t of e) { const e = t.contentWindow || t.contentDocument, i = e._transitions && e._transitions.reduce((e, t) => ("number" == typeof t.index || null == t.index ? e.inSlide.push(t) : e.onSlideChange.push(t), e), { onSlideChange: [], inSlide: [] }); i && i.inSlide.length && n.push(i.inSlide), i && i.onSlideChange.length && t === k && (a = i.onSlideChange[0]) } const [i, l] = function (e, t) { let n = []; for (const t of e) { const e = t.length, a = t.filter(e => e.index >= 0).map(e => e.index); if (a.length < e) { const t = e - a.length, n = 0 == a.length ? 0 : Math.max.apply(null, a) + 1; for (let e = 0; e < t; e++)a.push(e + n) } n.push(a) } let a = [...new Set([].concat(...n))]; a.sort((e, t) => e - t); const i = t.length, r = a.map(e => e > i - 1).reduce((e, t) => e + t, 0); let l; l = 0 == r ? [] : [...Array(r).keys()].map(e => e + i); let o = {}, s = 0; a.forEach(e => { e > i - 1 ? (o[e] = l[s], s += 1) : o[e] = e }); let d = []; for (let t = 0; t < e.length; t++) { const a = e[t], i = n[t]; if (a && i) { const e = a.length; let t = {}; for (let n = 0; n < e; n++)t[o[i[n]]] = { transitionForward: a[n].transitionForward, transitionBackward: "none" == a[n].transitionBackward ? () => { } : a[n].transitionBackward ? a[n].transitionBackward : a[n - 1 >= 0 ? n - 1 : 0].transitionForward }; d.push(t) } } return [d, a.map(e => o[e])] }(n, s); for (let t = 0; t < e.length; t++)e[t].transitionSteps = i[t]; k.transitionOnSlideChange = a; const o = Reveal.getCurrentSlide(), f = u({ currentSlide: o, previousSlide: Reveal.getPreviousSlide() }); let g = r.querySelectorAll(".fragment.visualizationStep"); if (g.length < l.length) { const e = l.length - g.length; for (let t = 0; t < e; t++) { const e = document.createElement("span"); f ? e.setAttribute("class", "fragment visualizationStep visible") : e.setAttribute("class", "fragment visualizationStep"), r.appendChild(e) } } g = r.querySelectorAll(".fragment.visualizationStep"); for (let e = 0; e < l.length; e++)g[e].setAttribute("data-fragment-index", l[e]); if (t.runLastState && r == o && k == e[e.length - 1]) for (const t of e) c(t); Reveal.layout() }) } function d(e) { const t = Reveal.getSlideBackground(e), n = Array.prototype.slice.call(e.querySelectorAll("iframe")), a = Array.prototype.slice.call(t.querySelectorAll("iframe")); let i = [].concat(...[n, a]); return i = i.filter(e => e.className.includes("iframe-visualization")) } function c(e) { const t = Reveal.getCurrentSlide(); if (u({ currentSlide: t, previousSlide: Reveal.getPreviousSlide() })) { const n = t.querySelectorAll(".fragment.visualizationStep"); if (0 == n.length) return; let a = []; for (const e of n) a.push(parseInt(e.getAttribute("data-fragment-index"))); g(e, Math.max.apply(null, a), "forward") } } function u(e) { const { currentSlide: t, previousSlide: n } = e, a = Reveal.getIndices(t), i = Reveal.getIndices(n); return a.h < i.h || a.v < i.v } function f(e) { let t = ""; for (const n of e.fragments) t = t.concat(n.className); return t.includes("visualizationStep") } function g(e, t, n) { "forward" == n ? e.transitionSteps && e.transitionSteps[t] && (e.transitionSteps[t].transitionForward || Function)() : e.transitionSteps && e.transitionSteps[t] && (e.transitionSteps[t].transitionBackward || Function)() } function h(e, t) { let n = parseInt(e.fragments[0].getAttribute("data-fragment-index")); !function (e, t, n) { for (const a of e) g(a, t, n) }(d(e.fragment.closest("section")), n, t) } Reveal.addEventListener("fragmentshown", function (e) { f(e) && h(e, "forward") }), Reveal.addEventListener("fragmenthidden", function (e) { f(e) && h(e, "backward") }) }();